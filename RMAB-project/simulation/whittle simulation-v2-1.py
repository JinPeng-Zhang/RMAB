
import numpy as np
import math
import  matplotlib.pyplot as plt
pcome = ...
# P0 = ...
# P1 = ...

class queue_simulation():
    def __init__(self,pcome,STATE_MAX,WI):
        self.STATE_MAX = STATE_MAX
        self.pcome =pcome
        self.queuenum = len(pcome)
        self.queue = np.zeros(len(pcome),dtype=int)
        self.WI = WI
        self.widthuseing = [[] for j in range(len(pcome))]
        self.drop = np.zeros(self.queuenum,dtype=int)
        self.time = 0

    def inpacket(self):
        for q in range(self.queuenum):
            burst = np.random.rand()
            if q == 5 and self.time > 3000 and self.time < 3500:
                packets = self.random_packets(self.pcome[q]+0.45, q)
                # print(packets)
            else:
                packets = self.random_packets(self.pcome[q],q)
            self.queue[q] = self.queue[q] + packets
            if self.queue[q]>=self.STATE_MAX:
                self.drop[q] = self.drop[q]+self.queue[q]-self.STATE_MAX+1
                self.queue[q] = self.STATE_MAX -1

    '返回选择的一个发包队列'
    def outpacket(self):
        wi = []
        for q in range(self.queuenum):
            wi.append(self.WI[q][self.queue[q]])
        que = wi.index(max(wi))
        if self.queue[que] > 0:
            self.queue[que] = self.queue[que] -1
        else:
            que = 8
        for q in range(self.queuenum):
            self.widthuseing[q].append(1 if q==que else 0)
        return que

    def run(self,times):
        avgrewards = []
        for q in range(self.queuenum):
            avgrewards.append([])
            avgrewards[q].append(0)
        ###average reward = (old*time+new)/(time+1),time = time+1
        for t in range(times):
            action1 = self.outpacket()
            self.inpacket()
            # print(self.queue,self.drop,self.time)
            for q in range(self.queuenum):
                avgrewards[q].append((avgrewards[q][t]*t+self.GetReward(q,action1))/(t+1))

            self.time = self.time + 1
        print("drop_num:{}".format(self.drop))
        return avgrewards

    def GetReward(self,queuen,action):
        ###set reward is -s
        return -self.queue[queuen]

    def random_packets(self,rate,queue):
        rad = np.random.rand()
        num = 0
        while rad>self.poission(num,expect=rate):
            rad = rad-self.poission(num,expect=rate)
            num = num +1
        return num

    def poission(self,k, expect=0.3):
        return expect ** k / math.factorial(k) * math.e ** (-expect)

    def show_width(self,step=-1):
        max_step = len(self.widthuseing[0])
        if step<0 or step>max_step:
            step = max_step
        timp = int(max_step / step)
        wid = np.zeros((self.queuenum,timp))
        for  tmp in range(timp):
            for q in range(self.queuenum):
                wid[q][tmp] = sum(self.widthuseing[q][tmp*step:(tmp+1)*step])/step
        # print(wid)
        # print(np.sum(wid,axis=0))
        # print(sum(self.pcome))

drop_times = 0
drop_sums = 0
exp_times = 1000

for i in range(exp_times):
    qu = queue_simulation(pcome=[0.02534504,0.13369194,0.09386043,0.01754024,0.17004173,0.2459021,0.03012342,0.0451653 ], \
            STATE_MAX=25,\
            WI=[[0.0, 1.666668098816357, 1.6667199153630694, 1.6686374713314471, 1.7350440304350636, 3.3333333333340835, 3.3333333333612565, 3.333333334370778, 3.33333337187684, 3.3333347654830305, 3.333386582029714, 3.335304137998129, 3.4017106971017057, 5.000000000000007, 5.000000000000412, 5.000000000015561, 5.000000000577884, 5.00000002147064, 5.000000797691023, 5.0000296313114205, 5.001100087489348, 5.041200147459918, 6.718452240718548, 129.41652126678036, 4710.1585756412605], [0.0, 1.667383911226693, 1.6723052685698456, 1.7107274318052115, 1.9875119501450076, 3.3333335218247377, 3.333334813697279, 3.333344959672843, 3.3334246422870315, 3.3340505778850122, 3.33897193516988, 3.3773940978892902, 3.654178608879654, 5.000000143534102, 5.000001127280655, 5.00000885337861, 5.000069533179968, 5.00054614110627, 5.004289799396162, 5.033722146853364, 5.272326888628584, 7.859975583494673, 51.21571645930072, 651.4991284686588, 3966.1356864731206], [0.0, 1.6668700655716564, 1.6688576709928356, 1.6901392129583748, 1.9015023031308642, 3.3333333484925305, 3.333333496480673, 3.333335089161249, 3.333352229770867, 3.333536732237704, 3.335524337652945, 3.3568058795528266, 3.5681689688622242, 5.000000005399521, 5.000000058110999, 5.000000625406756, 5.000006730826563, 5.000072441281546, 5.000779628651827, 5.008390581869364, 5.091660117454808, 6.209675835121928, 27.745224771807543, 462.50688436831854, 4219.606049918337], [0.0, 1.6666670063042688, 1.666684762245803, 1.6676264768263103, 1.7144113036782898, 3.333333333333373, 3.3333333333355863, 3.3333333334531545, 3.333333339712098, 3.333333672970948, 3.3333514289124615, 3.3342931434929852, 3.381077970344947, 5.000000000000007, 5.000000000000028, 5.0000000000006395, 5.000000000033509, 5.000000001784713, 5.000000095044598, 5.000005059328245, 5.000269171892427, 5.014429930039199, 5.847897698479372, 91.12831114846938, 4770.963221393411], [0.0, 1.6683048304837012, 1.6771433990578801, 1.7332299571775724, 2.0600228543867347, 3.3333343165495464, 3.3333396147312637, 3.333373462541502, 3.3335896994771304, 3.3349714973144486, 3.3438100667727824, 3.3998966305409652, 3.726689557085315, 5.000001325719545, 5.0000084695216245, 5.00005410871065, 5.0003456911169195, 5.002208866847141, 5.014118020794243, 5.090433584780527, 5.601522424472179, 10.448846274018194, 79.8578742863483, 819.2794857405991, 3752.4464350020135], [0.0, 1.6721362202290906, 1.6925488918975073, 1.7881912236257502, 2.195387132029458, 3.333344292620959, 3.333385129575465, 3.33357813240476, 3.3344902908828296, 3.3388029080546, 3.3592156585660398, 3.4548583629255134, 3.8620562864698442, 5.000029708827981, 5.000140414201255, 5.0006637054916965, 5.003138543356194, 5.014869003241287, 5.071010331020901, 5.354443041388308, 7.132865941370895, 20.57261935346311, 161.07913367764576, 1149.795175081322, 3353.53428876639], [0.0, 1.6666694672045972, 1.6667547214770364, 1.669422498536008, 1.7474960540572209, 3.3333333333362063, 3.3333333334236244, 3.3333333361702344, 3.333333422461717, 3.3333361338712635, 3.333421388143698, 3.3360891652026794, 3.414162720723816, 5.000000000000071, 5.0000000000021885, 5.00000000006964, 5.000000002188102, 5.0000000687473545, 5.000002159914182, 5.000067847942518, 5.002130090039486, 5.0675074892027965, 7.4028883361005455, 152.83945390293704, 4673.462462026939], [0.0, 1.6666799545040414, 1.666949757936044, 1.672668769790068, 1.7858266962072342, 3.3333333333980324, 3.3333333347106517, 3.3333333626529473, 3.3333339574672216, 3.3333466211707226, 3.333616424602692, 3.3393354364566257, 3.4524933628714436, 5.0000000000050235, 5.0000000001073275, 5.000000002284985, 5.0000000486417235, 5.000001035461679, 5.000022042568993, 5.000469141723187, 5.00998018396902, 5.214817122269324, 10.314524946690511, 226.44609684267903, 4560.502059618424]]
                          )
    r = qu.run(20000)
    newd = sum(qu.drop)
    if newd!=0:
        drop_times = drop_times + 1
        drop_sums = drop_sums + newd
print('丢包次数为：',drop_times,'平均丢包数为：',drop_sums/exp_times)


# for q in range(qu.queuenum):
#     plt.plot(r[q])
# plt.show()
# qu.show_width(step=1000)

#pcome = [0.02534504, 0.13369194, 0.09386043, 0.01754024, 0.17004173, 0.2459021, 0.03012342, 0.0451653]
#m/m/1
# width[0] 0.0421244 e:1.5104890770565742
# width[1] 0.172286  e:3.464054831235689
# width[2] 0.126154  e:2.906474260975173
# width[3] 0.0314724 e:1.2589749184620331
# width[4] 0.213572  e:3.906287050367479
# width[5] 0.298355  e:4.688055379206872
# width[6] 0.0484515 e:1.6435665929000747
# width[7] 0.0675858 e:2.0144644410249546

#band allocation2
# width[0] 0.025345  ES[0] 0.0256744
# width[1] 0.133692  ES[1] 0.144
# width[2] 0.0938604 ES[2] 0.0987206
# width[3] 0.25587   ES[3] 0.0176922
# width[4] 0.170042  ES[4] 0.187458
# width[5] 0.245902  ES[5] 0.285991
# width[6] 0.0301234 ES[6] 0.030591
# width[7] 0.0451653 ES[7] 0.0462321

# simulation 1
# -0.028600000000000007
# -0.1960000000000003
# -0.11199999999999993
# -0.015599999999999984
# -0.3438000000000008
# -1.1600000000000004
# -0.031199999999999978
# -0.045199999999999976
# [[0.2716]
#  [0.1332]
#  [0.0924]
#  [0.0156]
#  [0.171 ]
#  [0.2458]
#  [0.0296]
#  [0.0408]]




