'''
采用时变的whittle进行仿真
'''

import numpy as np
import math
import  matplotlib.pyplot as plt
pcome = ...

class queue_simulation():
    def __init__(self,pcome,STATE_MAX,WI1,WI2):
        self.STATE_MAX = STATE_MAX
        self.pcome =pcome
        self.queuenum = len(pcome)
        self.queue = np.zeros(len(pcome),dtype=int)
        self.WI1 = WI1      #平常
        self.WI2 = WI2      #突发
        self.widthuseing = [[] for j in range(len(pcome))]
        self.drop = np.zeros(self.queuenum,dtype=int)
        self.time = 0
        self.eq = 0
        self.et = 0

    def inpacket(self):
        allpackets = []
        for q in range(self.queuenum):
            burst = np.random.rand()
            if q == 5 and 3000 < self.time < 3500:
                packets = self.random_packets(self.pcome[q]+0.45, q)
                # print(packets)
            else:
                packets = self.random_packets(self.pcome[q],q)
            allpackets.append(packets)
            self.queue[q] = self.queue[q] + packets
            if self.queue[q]>=self.STATE_MAX:
                self.drop[q] = self.drop[q]+self.queue[q]-self.STATE_MAX+1
                self.queue[q] = self.STATE_MAX -1
        # if self.time > 3000 and self.time < 3500:
        #     print( 't:', self.time, 'come:',allpackets)
        return allpackets

    '返回选择的一个发包队列'
    def outpacket(self):
        wi = []
        if 3000 < self.time < 3500:
            for q in range(self.queuenum):
                wi.append(self.WI2[q][self.queue[q]])
        else:
            for q in range(self.queuenum):
                wi.append(self.WI1[q][self.queue[q]])
        que = wi.index(max(wi))
        if self.queue[que] > 0:
            self.queue[que] = self.queue[que] -1
        else:
            que = 8
        for q in range(self.queuenum):
            self.widthuseing[q].append(1 if q==que else 0)

        if que != 8:
            self.et = self.et + 1

        return que

    def run(self,times):
        avgrewards = []
        allpackets = np.zeros(self.queuenum,dtype=int)#统计来包率
        out5 = 0  #统计队列5的发包次数
        outt5 = []  #统计队列5每时刻的发包累计情况
        comee5 = []  #统计队列5每时刻的收包累计情况
        flag = 0  # 判断极端情况是否发生
        # flagt = []  # 判断极端情况发生时间
        for q in range(self.queuenum):
            avgrewards.append([])
            avgrewards[q].append(0)
        for t in range(times):
            action1 = self.outpacket()

            pp = self.inpacket()

            for q in range(self.queuenum):
                self.eq = self.eq + self.queue[q]

            if(3000 < self.time < 3500):
                # print('s:',self.queue,'drop:',self.drop,'time:',self.time)
                if action1 == 5:
                    out5 = out5 + 1
                    outt5.append(out5)
                else:
                    outt5.append(out5)
                allpackets = allpackets + pp
                comee5.append(allpackets[5])

                # diff = allpackets[5] - out5
                # if(diff > 20):
                #     flag = 1
                #     flagt.append(self.time)

            for q in range(self.queuenum):
                avgrewards[q].append((avgrewards[q][t]*t+self.GetReward(q,action1))/(t+1))

            self.time = self.time + 1
        print("drop_num:{}".format(self.drop))
        # print('come:', allpackets, sum(allpackets))
        # print('out5:',out5)
        # print(comee5)
        # print(outt5)
        # for i in range(499):
        #     for j in range(499):
        #         if j > i:
        #             diff = comee5[j] - comee5[i]
        #             if(diff > 20 + j -i):
        #                 flag = 1
        #                 print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
                        # print(comee5[j],comee5[i],j,i)
        # print('极端发生：',flag)
        return avgrewards

    def GetReward(self,queuen,action):
        ###set reward is -s
        return -self.queue[queuen]

    def random_packets(self,rate,queue):
        rad = np.random.rand()
        num = 0
        while rad>self.poission(num,expect=rate):
            rad = rad-self.poission(num,expect=rate)
            num = num +1
        return num

    def poission(self,k, expect=0.3):
        return expect ** k / math.factorial(k) * math.e ** (-expect)

    def show_width(self,step=-1):
        max_step = len(self.widthuseing[0])
        if step<0 or step>max_step:
            step = max_step
        timp = int(max_step / step)
        wid = np.zeros((self.queuenum,timp))
        for tmp in range(timp):
            for q in range(self.queuenum):
                wid[q][tmp] = sum(self.widthuseing[q][tmp*step:(tmp+1)*step])/step

drop_times = 0
drop_sums = 0
exp_times = 10000

etime = np.zeros(50) #统计e的取值分别落在0-0.01 0.01-0.02...0.19-0.2区间的次数

for i in range(exp_times):
    qu = queue_simulation(pcome=[0.02534504,0.13369194,0.09386043,0.01754024,0.17004173,0.2459021,0.03012342,0.0451653 ], \
            STATE_MAX=25,\
            WI1=[[6.938893903907228e-18, 0.14999999999999997, 0.15000000000000002, 0.15000000000000002, 0.15000000000000008, 0.15000000000000013, 0.15000000000000002, 0.15000000000000013, 0.1499999999999997, 0.15000000000000036, 0.1499999999999999, 0.1499999999999997, 0.15000000000000036, 0.15000000000000036, 0.1500000000000099, 0.1500000000003352, 0.15000000001247837, 0.15000000046360729, 0.15000001722421485, 0.15000063982340572, 0.15002375532073176, 0.15088932586691328, 0.18691097894848907, 2.738697768209243, 98.00381563313725], [2.7755575615628914e-17, 0.15, 0.15000000000000005, 0.15, 0.14999999999999997, 0.15000000000000097, 0.1500000000000068, 0.1500000000000542, 0.15000000000042668, 0.15000000000334923, 0.15000000002630665, 0.15000000020660265, 0.15000000162260352, 0.1500000127435206, 0.15000010008438514, 0.15000078603745948, 0.15000617345070966, 0.1500484894132632, 0.15038082757357074, 0.15299125776247724, 0.17422756740689893, 0.4165377183481165, 5.309157749335852, 73.05335721467418, 447.2077621556792], [0.0, 0.15, 0.15000000000000008, 0.1499999999999999, 0.1499999999999999, 0.1499999999999999, 0.15000000000000024, 0.15000000000000024, 0.1500000000000018, 0.150000000000023, 0.1500000000002446, 0.15000000000263647, 0.15000000002837455, 0.15000000030537186, 0.15000000328648944, 0.15000003537013162, 0.15000038066589472, 0.15000409701826278, 0.15004408821909854, 0.1504740915276379, 0.15519406945496872, 0.2222716002645755, 1.9237100411496337, 36.27345060049772, 333.1511928078677], [0.0, 0.14999999999999997, 0.15000000000000002, 0.15000000000000013, 0.14999999999999958, 0.15000000000000024, 0.15000000000000002, 0.1499999999999998, 0.15000000000000036, 0.1499999999999997, 0.1499999999999999, 0.14999999999999947, 0.15000000000000058, 0.1499999999999999, 0.1499999999999999, 0.15000000000001013, 0.1500000000005377, 0.15000000002868408, 0.15000000152747361, 0.15000008131159603, 0.1500043267696327, 0.15023167466546372, 0.16340534822966157, 1.371561974922038, 67.66793003314692], [0.0, 0.15000000000000002, 0.15000000000000013, 0.1500000000000008, 0.1500000000000054, 0.15000000000003477, 0.15000000000022173, 0.150000000001417, 0.15000000000905167, 0.15000000005782788, 0.15000000036944017, 0.15000000236021394, 0.150000015078517, 0.1500000963310002, 0.15000061542357446, 0.15000393180436333, 0.1500251229291205, 0.15016061403629655, 0.15102964695530696, 0.1567971788946525, 0.2081630017525402, 0.8350988372090651, 10.811539053202775, 117.09886065115833, 538.8706200248638], [0.0, 0.1500000000000233, 0.15000000000011046, 0.15000000000052158, 0.15000000000246516, 0.15000000001165076, 0.15000000005506453, 0.1500000002602475, 0.15000000122999257, 0.1500000058132429, 0.15000002747479613, 0.15000012985256705, 0.15000061371525808, 0.15000290057893895, 0.15001370912809842, 0.150064801005382, 0.15030645112333563, 0.15145123238908376, 0.15691077160260525, 0.1847561525321737, 0.4089347201383746, 3.171725207294647, 32.42475801730404, 238.29619864609404, 697.4840974619741], [6.938893903907228e-18, 0.15000000000000002, 0.15000000000000002, 0.1499999999999998, 0.15000000000000024, 0.1499999999999998, 0.15000000000000036, 0.1499999999999998, 0.15000000000000013, 0.1499999999999997, 0.15000000000000058, 0.14999999999999947, 0.1499999999999997, 0.15000000000000235, 0.1500000000000563, 0.15000000000175762, 0.15000000005521663, 0.1500000017348997, 0.15000005450730391, 0.1500017122090802, 0.15005375616458894, 0.15170337538545242, 0.21050698143532554, 3.825582926172133, 116.19219371254866], [1.3877787807814457e-17, 0.14999999999999997, 0.15, 0.1500000000000001, 0.14999999999999963, 0.1499999999999999, 0.1500000000000007, 0.14999999999999947, 0.15000000000000047, 0.1499999999999999, 0.1499999999999997, 0.1499999999999999, 0.15000000000000924, 0.15000000000018776, 0.15000000000399938, 0.1500000000851167, 0.15000000181194606, 0.1500000385718656, 0.15000082110537472, 0.15001747589004477, 0.15037176318908996, 0.1580029407662389, 0.3482773604830043, 8.482541698614455, 171.60055865743914]],\
            WI2=[[3.469446951953614e-18, 0.15000000000000002, 0.15, 0.15000000000000002, 0.15000000000000013, 0.1499999999999999, 0.1499999999999997, 0.15000000000000024, 0.1499999999999999, 0.15000000000000036, 0.1499999999999999, 0.1500000000000008, 0.14999999999999925, 0.1499999999999999, 0.15000000000000946, 0.15000000000033475, 0.15000000001247793, 0.15000000046357753, 0.1500000172231193, 0.1500006397826943, 0.15002375380946287, 0.15088926920994705, 0.18690858594034365, 2.7385108396711, 97.99673904912362], [0.0, 0.15000000000000005, 0.14999999999999994, 0.15000000000000005, 0.1499999999999999, 0.1500000000000009, 0.15000000000000746, 0.15000000000005442, 0.15000000000042657, 0.15000000000334857, 0.1500000000263051, 0.1500000002065891, 0.15000000162250138, 0.15000001274271213, 0.15000010007803977, 0.15000078598762, 0.150006173059281, 0.15004848633877277, 0.15038080342848392, 0.15299106819055686, 0.17422602966655898, 0.4165204102806097, 5.308796465347358, 73.04823308803101, 447.17633044989367], [-1.3877787807814457e-17, 0.15000000000000005, 0.15000000000000008, 0.1499999999999999, 0.1499999999999999, 0.15000000000000013, 0.15000000000000002, 0.15000000000000024, 0.15000000000000213, 0.15000000000002278, 0.15000000000024416, 0.15000000000263647, 0.150000000028373, 0.1500000003053552, 0.15000000328631558, 0.15000003536824336, 0.1500003806455812, 0.15000409679961058, 0.1500440858664649, 0.15047406625321713, 0.15519379164648583, 0.22226751072701134, 1.9235860009626542, 36.27090487823941, 333.12771542928374], [3.469446951953614e-18, 0.14999999999999994, 0.1499999999999999, 0.1500000000000002, 0.15000000000000008, 0.1499999999999999, 0.1499999999999998, 0.1499999999999998, 0.15000000000000013, 0.15000000000000036, 0.1499999999999999, 0.14999999999999925, 0.15000000000000013, 0.1499999999999999, 0.15000000000000124, 0.15000000000000968, 0.15000000000053815, 0.15000000002868052, 0.15000000152738702, 0.1500000813069624, 0.1500043265232227, 0.1502316614375121, 0.16340455730128944, 1.3714724213072902, 67.66296940403667], [2.7755575615628914e-17, 0.15000000000000002, 0.15000000000000013, 0.1500000000000008, 0.1500000000000053, 0.15000000000003466, 0.15000000000022218, 0.15000000000141667, 0.15000000000905145, 0.15000000005782566, 0.15000000036942773, 0.15000000236013533, 0.15000001507801564, 0.15000009632779787, 0.15000061540311527, 0.15000393167364812, 0.15002512209383312, 0.1501606086981062, 0.15102961284058525, 0.1567969521226953, 0.20816073443042704, 0.8350525545717562, 10.810792349649628, 117.09065164606794, 538.8327962235328], [-1.1102230246251565e-16, 0.15000031528767932, 0.15000073042719675, 0.1500016921868454, 0.15000392033372364, 0.1500090825021807, 0.15002104291725465, 0.15004875824115682, 0.15011300209191775, 0.15026202802378907, 0.1506083134353774, 0.1514162074388712, 0.1533188996433198, 0.1578980821845113, 0.16950038330649142, 0.19987255492033218, 0.28814734365194394, 0.6689378404475628, 2.3214197391157754, 9.606299463717354, 41.4204270471778, 162.55035592412167, 490.75365576483694, 941.206755122067, 1082.6787330786979], [0.0, 0.15000000000000002, 0.14999999999999986, 0.15000000000000002, 0.14999999999999974, 0.15000000000000036, 0.15000000000000002, 0.14999999999999958, 0.1499999999999999, 0.15000000000000013, 0.1499999999999999, 0.15000000000000013, 0.1499999999999997, 0.1500000000000019, 0.1500000000000552, 0.15000000000175673, 0.1500000000552153, 0.15000000173478556, 0.15000005450372855, 0.15000171209674384, 0.15005375263817244, 0.1517032635271578, 0.21050295693677068, 3.8253189279545903, 116.18384848480582], [-6.938893903907228e-18, 0.14999999999999997, 0.1500000000000001, 0.14999999999999997, 0.14999999999999974, 0.15000000000000002, 0.1499999999999999, 0.1499999999999999, 0.15000000000000024, 0.1499999999999997, 0.1499999999999997, 0.15000000000000058, 0.15000000000000946, 0.15000000000018776, 0.15000000000399893, 0.1500000000851096, 0.1500000018118226, 0.1500000385692304, 0.15000082104927603, 0.15001747469604876, 0.15037173779111423, 0.1580023937490238, 0.34826372684532103, 8.481948793795587, 171.58834874040724]]
                          )
    print('第',i+1,'次：')
    r = qu.run(5000)
    newd = sum(qu.drop)
    if newd!=0:
        drop_times = drop_times + 1
        drop_sums = drop_sums + newd
    print(qu.eq, qu.et,qu.et/qu.eq)
    e = qu.et/qu.eq
    etime[int(e/0.01)] = etime[int(e/0.01)] + 1

print(etime)
# print('丢包次数为：',drop_times,'平均丢包数为：',drop_sums/exp_times)