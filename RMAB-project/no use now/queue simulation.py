
import numpy as np
import math
import  matplotlib.pyplot as plt
pcome = ...
# P0 = ...
# P1 = ...

class queue_simulation():
    def __init__(self,pcome,STATE_MAX,WI):
        self.STATE_MAX = STATE_MAX
        self.pcome =pcome
        self.queuenum = len(pcome)
        self.queue = np.zeros(len(pcome),dtype=int)
        self.WI = WI
        self.widthuseing = [[] for j in range(len(pcome))]
        self.drop = np.zeros(self.queuenum,dtype=int)
        self.time = 0

    '每个队列进数据包，并统计丢包'
    def inpacket(self):
        for q in range(self.queuenum):
            packets = self.random_packets(self.pcome[q],q)
            self.queue[q] = self.queue[q] + packets
            if self.queue[q]>=self.STATE_MAX:
                self.drop[q] = self.drop[q]+self.queue[q]-self.STATE_MAX+1
                self.queue[q] = self.STATE_MAX -1

    '输出数据包，若wi最大的队列无包则不输出，最后返回输出的队列编号（不输出则为8）'
    def outpacket(self):
        wi = []
        for q in range(self.queuenum):
            wi.append(self.WI[q][self.queue[q]])
        que = wi.index(max(wi))
        if self.queue[que] > 0:
            self.queue[que] = self.queue[que] -1
        else:
            que = 8
        for q in range(self.queuenum):
            self.widthuseing[q].append(1 if q==que else 0)
        return que

    '模拟调度过程，打印队列和丢包数，返回平均奖励（时间平均）'
    def run(self,times):
        avgrewards = []
        for q in range(self.queuenum):
            avgrewards.append([])
            avgrewards[q].append(0)
        # average reward = (old*time+new)/(time+1),time = time+1
        for t in range(times):
            action1 = self.outpacket()
            self.inpacket()

            # print(self.queue)

            for q in range(self.queuenum):
                avgrewards[q].append((avgrewards[q][t]*t+self.GetReward(q,action1))/(t+1))#时间平均

            self.time = self.time + 1
        print("drop_num:{}".format(self.drop))
        return avgrewards

    '随机生成满足泊松分布分布个数num个数据包，queue为数据包加入的队列'
    def random_packets(self,rate,queue):
        rad = np.random.rand()
        num = 0
        while rad>self.poission(num,expect=rate):
            rad = rad-self.poission(num,expect=rate)
            num = num +1

        brust = np.random.rand()
        if brust <0.15 and queue==5 and self.time>3000 and self.time <3500:
            num = num+3

        return num

    def poission(self,k, expect=0.3):
        return expect ** k / math.factorial(k) * math.e ** (-expect)

    ''
    def show_width(self,step=-1):##step为输出时间步长，step=-1表示输出全部时间节点
        max_step = len(self.widthuseing[0])

        # print('widthuseing[0]:',self.widthuseing[0])   =很多0,1的矩阵

        if step<0 or step>max_step:
            step = max_step
        timp = int(max_step / step)

        # print('timp:',timp)   =50

        wid = np.zeros((self.queuenum,timp))
        for tmp in range(timp):
            for q in range(self.queuenum):
                wid[q][tmp] = sum(self.widthuseing[q][tmp*step:(tmp+1)*step])/step
        # print('wid:',wid)
        # print('sum_wid:',np.sum(wid,axis=0))
        # print('sum_pcome',sum(self.pcome))  =0.76
    '返回奖励'
    def GetReward(self, queuen, action):
        ###set reward
        re = self.queue[queuen]
        re1 = re
        re2 = re**2/20
        re3 = re**3/400
        re4 = re ** 4 / 8000
        if(queuen < 10):
            reward = re1
        else:
            reward = re1
        return -re1

qu = queue_simulation(pcome=[0.02534504,0.13369194,0.09386043,0.01754024,0.17004173,0.2459021,0.03012342,0.0451653], \
        STATE_MAX=20,\
        WI=[[0.0, 33.33333679892412, 33.333340963838396, 33.33335013418894, 33.33337032586789, 33.33341478629876, 33.33351269184564, 33.333728323377755, 33.33420341174528, 33.33525098122243, 33.33756493815366, 33.34269611612001, 33.354173263524956, 33.380348785865294, 33.442788558806, 33.6091635234331, 34.22440570815428, 38.302788997685866, 347.70539457457915, 6764.174172746793], [0.0, 33.38285645361053, 33.39482440362859, 33.409893013081856, 33.42898301412507, 33.453357526884204, 33.48479215201334, 33.52585876641123, 33.57857557600158, 33.64807875711716, 33.74252861906717, 33.874884281497486, 34.068571675978205, 34.37076301835714, 34.892776496711065, 35.975564954422055, 39.45054646270688, 63.935194926121255, 304.018658514996, 473.87711844500996], [0.0, 33.34643833681855, 33.350755730809674, 33.35652391267129, 33.36425253542734, 33.37464779741771, 33.38870233923464, 33.40783784499578, 33.43414114273648, 33.470775712695996, 33.52274494877423, 33.59842088596184, 33.712921067461366, 33.89660900658026, 34.220872631872055, 34.903158500914174, 37.08327736946393, 50.26864481360468, 269.51056821211967, 689.5384386570722], [0.0, 33.333333438933956, 33.33333362231275, 33.3333341241352, 33.33333549739238, 33.33333925537586, 33.33334953935878, 33.333377682869894, 33.333454706391535, 33.33366554278115, 33.33424294550258, 33.33582634453563, 33.34018436814591, 33.35230074032563, 33.386954865772736, 33.49467188524875, 33.94014107178879, 36.7952962701587, 354.31504394356256, 11576.01289251457], [0.0, 33.429555558388415, 33.448723760047585, 33.47218143915728, 33.50110670839779, 33.53710887266659, 33.582444275545996, 33.64037711940395, 33.71581333293051, 33.81648350588483, 33.955323550997434, 34.15575523910013, 34.465037354889546, 34.97210635872051, 35.739151846934305, 37.32268487095291, 42.46139763090696, 81.11843720469574, 329.78524220480233, 380.7678520527239], [0.0, 33.56913303265994, 33.6055069854857, 33.648807846250904, 33.70083007306391, 33.76402396170022, 33.84182606511797, 33.9392120905479, 34.06366913434749, 34.22701198821923, 34.449043067458064, 34.765683718256184, 35.249579451667444, 36.073159795690515, 37.76953057622808, 41.768090956612525, 52.44898524381131, 124.6173956810369, 273.6889380057586, 265.5660784455721], [0.0, 33.33334820136295, 33.33336323555589, 33.33339347283318, 33.33345428972086, 33.333576622773094, 33.33382273890609, 33.33431806430036, 33.33531565310915, 33.33732769977891, 33.341397630789515, 33.34967883789301, 33.366732600833416, 33.4027378459005, 33.48292006134744, 33.684840555266646, 34.402768578022744, 39.214423143098884, 343.34740507888506, 5182.54707783372], [0.0, 33.33361875732223, 33.333811331263796, 33.33413393062634, 33.33467452323538, 33.33558090750516, 33.33710197960443, 33.33965850809568, 33.34396642235498, 33.351257050383396, 33.36368649705918, 33.385144510742805, 33.423004534278846, 33.492441924110324, 33.62933228253445, 33.94217338688634, 34.985528663551065, 42.02165448680364, 328.23799550495914, 2669.380897736579]]
                      )
r = qu.run(200000)
for q in range(qu.queuenum):
    plt.plot(r[q])
plt.show()
qu.show_width(step=1000)

'''qu = queue_simulation(pcome=[0.02534504,0.13369194,0.09386043,0.01754024,0.17004173,0.2459021,0.03012342,0.0451653], \
        STATE_MAX=20,\
        WI=[[0.0, 100.0050251320197, 100.00703124929697, 100.0098457748426, 100.01380174683024, 100.01937649008889, 100.02726111100884, 100.0384704290015, 100.05452390292248, 100.0777585899375, 100.11190508866218, 100.16323276303729, 100.24306290135223, 100.37405331351806, 100.60910153839018, 101.10736809245032, 102.67389256590263, 114.89357632904216, 1021.2974398368511, 10556.925559707222],
            [0.0, 100.51834761851848, 100.57961934807273, 100.65121453476809, 100.73573966107898, 100.83675326541322, 100.95924473096984, 101.11043436557179, 101.30117798046825, 101.54858557943493, 101.88128461497888, 102.35107418788277, 102.97841939458385, 103.87907830706195, 105.39697899088617, 108.48495283982118, 118.23096611052802, 186.05536477657222, 541.5507435150274, 536.0910951804738],
            [0.0, 100.28062813468492, 100.31995122992559, 100.36513636533509, 100.4185259001793, 100.4822147715063, 100.55906096848213, 100.65306848766824, 100.77002685110932, 100.91863292283972, 101.11258037219375, 101.37475403624808, 101.74650216600526, 102.31097153643225, 103.26380474546329, 105.20066638160301, 111.2326608980809, 149.3057846959157, 640.0736872656748, 816.7520060869897],
            [0.0, 100.00073667943207, 100.00115926296982, 100.00182468384632, 100.00287312380988, 100.004526629272, 100.00713832308264, 100.0112733011, 100.01784477647095, 100.02835131858865, 100.04531158777979, 100.07311940437262, 100.1198974940628, 100.20208910878182, 100.35819015683069, 100.70380119499009, 101.82075618167801, 110.38240249522028, 1052.1473374067803, 19935.6619427568],
            [0.0, 100.75809017680149, 100.83946156943168, 100.93413338554251, 101.04545691410857, 101.17800935994512, 101.3382110750064, 101.53535748103042, 101.78343171894016, 102.10448658179462, 102.53544802031831, 103.14319795305914, 104.06268140530688, 105.6130351454949, 108.03174202977732, 112.54363086159253, 126.96452881374898, 228.2865595418442, 438.20230135048286, 431.8388506663361],
            [0.0, 101.35082241681084, 101.48000809424047, 101.62974875164431, 101.80522124690569, 102.0134989464363, 102.26450785665563, 102.5726260679798, 102.95949526937753, 103.45927084522339, 104.12919519239188, 105.07307170885781, 106.500690592978, 108.90943059108258, 113.83375937978019, 125.38177430668884, 154.3548752642755, 305.101301674595, 312.6723258850001, 305.26798448607065],
            [0.0, 100.01063893398033, 100.01423664013447, 100.01907284807308, 100.02559144460643, 100.03440966196396, 100.04639755776986, 100.06280386121, 100.08546386578439, 100.11716085592718, 100.16229460582247, 100.2282160915197, 100.32816465145129, 100.48862503919372, 100.77147870756698, 101.36317596620006, 103.20922137900175, 117.61539072733399, 999.9500816965699, 7736.675889476792],
            [0.0, 100.0451558974498, 100.05572568186777, 100.06892198374526, 100.0854798052328, 100.10638586440015, 100.13299163161537, 100.16719391975738, 100.2117357242725, 100.27073289353189, 100.35065332462807, 100.46227889158831, 100.62503275956931, 100.87783667680117, 101.31185734986275, 102.20267590858384, 104.95810216983955, 125.9474291837621, 923.1154598354946, 3619.3252842652128]]
                      )'''
